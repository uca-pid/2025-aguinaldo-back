meta {
  name: Get My Profile
  type: http
  seq: 1
}

get {
  url: {{baseUrl}}/api/profile/me
  body: none
  auth: bearer
}

auth:bearer {
  token: {{accessToken}}
}

headers {
  Content-Type: application/json
}

assert {
  res.status: eq 200
  res.body.id: isDefined
  res.body.email: isDefined
  res.body.name: isDefined
  res.body.surname: isDefined
  res.body.role: isDefined
}

tests {
  test("Should get my profile successfully", function() {
    expect(res.getStatus()).to.equal(200);
    expect(res.getBody().id).to.be.a('string');
    expect(res.getBody().email).to.be.a('string');
    expect(res.getBody().name).to.be.a('string');
    expect(res.getBody().surname).to.be.a('string');
    expect(res.getBody().role).to.be.a('string');
  });
  
  test("Should have correct user data structure", function() {
    const profile = res.getBody();
    expect(profile).to.have.property('id');
    expect(profile).to.have.property('email');
    expect(profile).to.have.property('name');
    expect(profile).to.have.property('surname');
    expect(profile).to.have.property('dni');
    expect(profile).to.have.property('role');
    expect(profile).to.have.property('status');
  });
  
  test("Should include doctor fields if user is doctor", function() {
    const profile = res.getBody();
    if (profile.role === 'DOCTOR') {
      expect(profile).to.have.property('medicalLicense');
      expect(profile).to.have.property('specialty');
      expect(profile).to.have.property('slotDurationMin');
    }
  });
}